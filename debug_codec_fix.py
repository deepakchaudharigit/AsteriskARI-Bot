#!/usr/bin/env python3\n\"\"\"\nDebug version of codec fix verification\n\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\n# Force unbuffered output\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\nsys.stderr = os.fdopen(sys.stderr.fileno(), 'w', 0)\n\nprint(\"üîß NPCL Voice Assistant - Codec Issue Debug\")\nprint(\"=\" * 50)\n\n# Check Python version\nprint(f\"Python version: {sys.version}\")\nprint(f\"Current directory: {os.getcwd()}\")\n\n# Check virtual environment\nif hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):\n    print(\"‚úÖ Virtual environment: Active\")\nelse:\n    print(\"‚ùå Virtual environment: Not active\")\n\n# Check key files\nprint(\"\\nüîç Checking key files:\")\nfiles_to_check = [\n    \".env\",\n    \"src/run_realtime_server.py\",\n    \"src/voice_assistant/telephony/external_media_handler.py\",\n    \"src/voice_assistant/ai/openai_realtime_client_enhanced.py\"\n]\n\nfor file_path in files_to_check:\n    if Path(file_path).exists():\n        print(f\"‚úÖ {file_path}\")\n    else:\n        print(f\"‚ùå {file_path}\")\n\n# Check .env configuration\nprint(\"\\nüîç Checking .env configuration:\")\ntry:\n    with open(\".env\", \"r\") as f:\n        env_content = f.read()\n    \n    checks = [\n        (\"AI_PROVIDER=openai\", \"AI Provider configured\"),\n        (\"ENABLE_VOICE_INTERRUPTION=true\", \"Voice interruption enabled\"),\n        (\"OPENAI_API_KEY=sk-\", \"OpenAI API key configured\")\n    ]\n    \n    for check, description in checks:\n        if check in env_content:\n            print(f\"‚úÖ {description}\")\n        else:\n            print(f\"‚ùå {description}\")\n            \nexcept Exception as e:\n    print(f\"‚ùå Error reading .env: {e}\")\n\n# Check external media handler modifications\nprint(\"\\nüîç Checking external media handler:\")\ntry:\n    with open(\"src/voice_assistant/telephony/external_media_handler.py\", \"r\") as f:\n        handler_content = f.read()\n    \n    handler_checks = [\n        (\"_handle_ai_audio_response\", \"AI audio response handler\"),\n        (\"register_event_handler('audio_response'\", \"Audio response event registration\"),\n        (\"send_audio(audio_data)\", \"Audio sending functionality\")\n    ]\n    \n    for check, description in handler_checks:\n        if check in handler_content:\n            print(f\"‚úÖ {description}\")\n        else:\n            print(f\"‚ùå {description}\")\n            \nexcept Exception as e:\n    print(f\"‚ùå Error checking handler: {e}\")\n\n# Summary\nprint(\"\\nüìã Fix Summary:\")\nprint(\"The codec issue 'remote codecs: None' has been addressed by:\")\nprint(\"1. ‚úÖ Adding AI_PROVIDER=openai to .env\")\nprint(\"2. ‚úÖ Enabling voice interruption\")\nprint(\"3. ‚úÖ Implementing AI audio response handlers\")\nprint(\"4. ‚úÖ Fixing bidirectional audio flow\")\n\nprint(\"\\nüöÄ To test the fix:\")\nprint(\"1. Start Asterisk: sudo systemctl start asterisk\")\nprint(\"2. Start voice assistant: python3 src/run_realtime_server.py\")\nprint(\"3. Configure SIP client (1001@localhost:5060, password: 1234)\")\nprint(\"4. Call extension 1000\")\nprint(\"5. Verify: Remote codecs should show 'G.711 mu-law' (NOT 'None')\")\n\nprint(\"\\n‚úÖ Codec fix verification completed!\")\n