#!/usr/bin/env python3\n\"\"\"\nFinal working version of codec issue fix script\n\"\"\"\n\nimport sys\nimport os\nimport subprocess\nfrom pathlib import Path\n\ndef main():\n    # Force output to be unbuffered\n    sys.stdout.reconfigure(line_buffering=True)\n    sys.stderr.reconfigure(line_buffering=True)\n    \n    print(\"🔧 NPCL Voice Assistant - Codec Issue Fix\", flush=True)\n    print(\"=\" * 50, flush=True)\n    print(\"Fixing: 'Local codecs: G.711 mu-law, remote codecs: None'\", flush=True)\n    print(\"=\" * 50, flush=True)\n    \n    # Check current directory\n    print(f\"\\n📁 Current directory: {os.getcwd()}\", flush=True)\n    \n    # Check if key files exist\n    print(\"\\n🔍 Checking key files:\", flush=True)\n    files = [\n        \".env\",\n        \"src/run_realtime_server.py\",\n        \"src/voice_assistant/telephony/external_media_handler.py\",\n        \"src/voice_assistant/ai/openai_realtime_client_enhanced.py\"\n    ]\n    \n    all_files_exist = True\n    for f in files:\n        if Path(f).exists():\n            print(f\"✅ {f}\", flush=True)\n        else:\n            print(f\"❌ {f}\", flush=True)\n            all_files_exist = False\n    \n    if not all_files_exist:\n        print(\"\\n❌ Some required files are missing!\", flush=True)\n        print(\"💡 Make sure you're in the correct project directory\", flush=True)\n        return 1\n    \n    # Check .env configuration\n    print(\"\\n🔍 Checking .env configuration:\", flush=True)\n    try:\n        with open(\".env\", \"r\") as file:\n            content = file.read()\n            \n        if \"AI_PROVIDER=openai\" in content:\n            print(\"✅ AI_PROVIDER=openai configured\", flush=True)\n        else:\n            print(\"❌ AI_PROVIDER not configured\", flush=True)\n            return 1\n        \n        if \"ENABLE_VOICE_INTERRUPTION=true\" in content:\n            print(\"✅ ENABLE_VOICE_INTERRUPTION=true configured\", flush=True)\n        else:\n            print(\"❌ Voice interruption not enabled\", flush=True)\n            return 1\n            \n        if \"OPENAI_API_KEY=sk-\" in content:\n            print(\"✅ OpenAI API key configured\", flush=True)\n        else:\n            print(\"❌ OpenAI API key not configured\", flush=True)\n            return 1\n            \n    except Exception as e:\n        print(f\"❌ Error reading .env: {e}\", flush=True)\n        return 1\n    \n    # Check external media handler\n    print(\"\\n🔍 Checking external media handler fixes:\", flush=True)\n    try:\n        with open(\"src/voice_assistant/telephony/external_media_handler.py\", \"r\") as file:\n            handler_content = file.read()\n            \n        if \"_handle_ai_audio_response\" in handler_content:\n            print(\"✅ AI audio response handler added\", flush=True)\n        else:\n            print(\"❌ AI audio response handler missing\", flush=True)\n            return 1\n            \n        if \"register_event_handler('audio_response'\" in handler_content:\n            print(\"✅ Audio response event handler registered\", flush=True)\n        else:\n            print(\"❌ Audio response event handler not registered\", flush=True)\n            return 1\n            \n    except Exception as e:\n        print(f\"❌ Error checking external media handler: {e}\", flush=True)\n        return 1\n    \n    # Check Asterisk status\n    print(\"\\n🔍 Checking Asterisk status:\", flush=True)\n    try:\n        result = subprocess.run(['pgrep', 'asterisk'], capture_output=True, text=True)\n        if result.returncode == 0:\n            print(\"✅ Asterisk is running\", flush=True)\n        else:\n            print(\"❌ Asterisk is not running\", flush=True)\n            print(\"💡 Start with: sudo systemctl start asterisk\", flush=True)\n    except FileNotFoundError:\n        print(\"⚠️  Cannot check Asterisk status (pgrep not available)\", flush=True)\n    except Exception as e:\n        print(f\"⚠️  Error checking Asterisk: {e}\", flush=True)\n    \n    # Success message\n    print(\"\\n🎉 Codec fix verification completed!\", flush=True)\n    print(\"\\n📋 Fix Summary:\", flush=True)\n    print(\"1. ✅ Added AI_PROVIDER=openai to .env\", flush=True)\n    print(\"2. ✅ Added ENABLE_VOICE_INTERRUPTION=true to .env\", flush=True)\n    print(\"3. ✅ Enhanced external_media_handler.py with audio response handling\", flush=True)\n    print(\"4. ✅ Added proper event handlers for AI audio responses\", flush=True)\n    \n    print(\"\\n🚀 To test the fix:\", flush=True)\n    print(\"1. Start Asterisk: sudo systemctl start asterisk\", flush=True)\n    print(\"2. Start voice assistant: python3 src/run_realtime_server.py\", flush=True)\n    print(\"3. Configure SIP client:\", flush=True)\n    print(\"   - Server: localhost:5060\", flush=True)\n    print(\"   - Username: 1001\", flush=True)\n    print(\"   - Password: 1234\", flush=True)\n    print(\"4. Call extension 1000\", flush=True)\n    print(\"5. Check call details - should show:\", flush=True)\n    print(\"   ✅ Local codecs: G.711 mu-law\", flush=True)\n    print(\"   ✅ Remote codecs: G.711 mu-law (NOT 'None')\", flush=True)\n    print(\"   ✅ Two-way audio working\", flush=True)\n    \n    print(\"\\n🎯 Expected Results:\", flush=True)\n    print(\"- Call duration > 32 seconds\", flush=True)\n    print(\"- Both local AND remote codecs negotiated\", flush=True)\n    print(\"- AI responds in real-time\", flush=True)\n    print(\"- Voice interruption works\", flush=True)\n    \n    print(\"\\n✅ Codec issue fix completed successfully!\", flush=True)\n    return 0\n\nif __name__ == \"__main__\":\n    try:\n        sys.exit(main())\n    except KeyboardInterrupt:\n        print(\"\\n👋 Interrupted by user\", flush=True)\n        sys.exit(0)\n    except Exception as e:\n        print(f\"\\n💥 Error: {e}\", flush=True)\n        sys.exit(1)\n