#!/usr/bin/env python3\n\"\"\"\nTest OpenAI API key directly\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add src to path\nsys.path.insert(0, 'src')\n\ndef test_api_key():\n    print(\"üîç Testing OpenAI API Key...\")\n    \n    # Load .env manually\n    env_file = Path('.env')\n    if env_file.exists():\n        with open(env_file, 'r') as f:\n            for line in f:\n                if line.strip() and not line.startswith('#') and '=' in line:\n                    key, value = line.strip().split('=', 1)\n                    os.environ[key] = value\n    \n    # Get API key\n    api_key = os.environ.get('OPENAI_API_KEY', '')\n    print(f\"API Key length: {len(api_key)}\")\n    print(f\"API Key starts with: {api_key[:15]}...\")\n    print(f\"API Key ends with: ...{api_key[-15:]}\")\n    \n    # Test with OpenAI\n    try:\n        import openai\n        client = openai.OpenAI(api_key=api_key)\n        \n        # Simple test\n        response = client.chat.completions.create(\n            model=\"gpt-4o-mini\",\n            messages=[{\"role\": \"user\", \"content\": \"Hello\"}],\n            max_tokens=5\n        )\n        print(\"‚úÖ API Key is VALID!\")\n        print(f\"Test response: {response.choices[0].message.content}\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå API Key test failed: {e}\")\n        return False\n\ndef test_settings():\n    print(\"\\nüîç Testing Settings Configuration...\")\n    \n    try:\n        from config.settings import get_settings\n        settings = get_settings()\n        \n        print(f\"AI Provider: {settings.ai_provider}\")\n        print(f\"OpenAI Model: {settings.openai_model}\")\n        print(f\"Voice Model: {settings.voice_model}\")\n        print(f\"Voice Interruption: {settings.enable_voice_interruption}\")\n        \n        # Check API key from settings\n        api_key = settings.openai_api_key\n        print(f\"Settings API Key length: {len(api_key)}\")\n        print(f\"Settings API Key starts with: {api_key[:15]}...\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Settings test failed: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    print(\"üß™ OpenAI API Key Diagnostic Test\")\n    print(\"=\" * 40)\n    \n    # Test direct API key\n    key_ok = test_api_key()\n    \n    # Test settings\n    settings_ok = test_settings()\n    \n    print(\"\\n\" + \"=\" * 40)\n    if key_ok and settings_ok:\n        print(\"‚úÖ All tests passed! API key is working.\")\n    else:\n        print(\"‚ùå Some tests failed. Check API key configuration.\")\n        print(\"\\nüí° Solutions:\")\n        print(\"1. Verify API key in .env file\")\n        print(\"2. Check for extra spaces or newlines\")\n        print(\"3. Ensure API key has proper permissions\")\n        print(\"4. Try regenerating the API key from OpenAI dashboard\")\n