#!/usr/bin/env python3\n\"\"\"\nComprehensive fix for the codec negotiation issue\n\"remote codecs: None\" problem resolution\n\"\"\"\n\nimport os\nimport sys\nimport subprocess\nimport time\nfrom pathlib import Path\n\n# Check for required modules\ntry:\n    import requests\n    REQUESTS_AVAILABLE = True\nexcept ImportError:\n    REQUESTS_AVAILABLE = False\n    print(\"⚠️  Warning: 'requests' module not available. ARI connectivity check will be skipped.\")\n    print(\"💡 Install with: pip install requests\")\n\ndef print_banner():\n    \"\"\"Print fix banner\"\"\"\n    print(\"🔧 NPCL Voice Assistant - Codec Issue Fix\")\n    print(\"=\" * 50)\n    print(\"Fixing: 'Local codecs: G.711 mu-law, remote codecs: None'\")\n    print(\"=\" * 50)\n\ndef check_asterisk_status():\n    \"\"\"Check if Asterisk is running\"\"\"\n    try:\n        # Try pgrep first (Linux/macOS)\n        result = subprocess.run(['pgrep', 'asterisk'], capture_output=True, text=True)\n        if result.returncode == 0:\n            print(\"✅ Asterisk: Running\")\n            return True\n        else:\n            print(\"❌ Asterisk: Not running\")\n            return False\n    except FileNotFoundError:\n        # pgrep not available, try alternative methods\n        try:\n            # Try ps command\n            result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)\n            if 'asterisk' in result.stdout:\n                print(\"✅ Asterisk: Running (detected via ps)\")\n                return True\n            else:\n                print(\"❌ Asterisk: Not running\")\n                return False\n        except Exception:\n            print(\"⚠️  Asterisk: Status unknown (cannot check process)\")\n            return True  # Assume it's running if we can't check\n\ndef check_ari_connectivity():\n    \"\"\"Check ARI connectivity\"\"\"\n    if not REQUESTS_AVAILABLE:\n        print(\"⚠️  Asterisk ARI: Cannot check (requests module missing)\")\n        return True  # Assume it's working if we can't check\n    \n    try:\n        import requests\n        response = requests.get(\n            \"http://localhost:8088/ari/asterisk/info\",\n            auth=(\"asterisk\", \"1234\"),\n            timeout=5\n        )\n        if response.status_code == 200:\n            print(\"✅ Asterisk ARI: Connected\")\n            return True\n        else:\n            print(f\"❌ Asterisk ARI: HTTP {response.status_code}\")\n            return False\n    except Exception as e:\n        print(f\"❌ Asterisk ARI: Connection failed - {e}\")\n        return False\n\ndef check_dependencies():\n    \"\"\"Check required dependencies\"\"\"\n    print(\"\\n🔍 Checking Dependencies:\")\n    \n    # Check Python version\n    python_version = sys.version_info\n    if python_version >= (3, 8):\n        print(f\"✅ Python: {python_version.major}.{python_version.minor}.{python_version.micro}\")\n    else:\n        print(f\"❌ Python: {python_version.major}.{python_version.minor}.{python_version.micro} (requires 3.8+)\")\n        return False\n    \n    # Check key files\n    required_files = [\n        \"src/run_realtime_server.py\",\n        \".env\",\n        \"src/voice_assistant/ai/openai_realtime_client_enhanced.py\",\n        \"src/voice_assistant/telephony/external_media_handler.py\"\n    ]\n    \n    missing_files = []\n    for file_path in required_files:\n        if Path(file_path).exists():\n            print(f\"✅ {file_path}\")\n        else:\n            print(f\"❌ {file_path}\")\n            missing_files.append(file_path)\n    \n    if missing_files:\n        print(f\"\\n❌ Missing files: {missing_files}\")\n        print(\"💡 Make sure you're in the correct project directory\")\n        return False\n    \n    return True\n\ndef start_voice_assistant():\n    \"\"\"Start the voice assistant server\"\"\"\n    print(\"\\n🚀 Starting NPCL Voice Assistant Server...\")\n    \n    try:\n        # Change to project directory\n        os.chdir(Path(__file__).parent)\n        \n        # Check if the server file exists\n        server_file = Path(\"src/run_realtime_server.py\")\n        if not server_file.exists():\n            print(f\"❌ Server file not found: {server_file}\")\n            print(\"💡 Make sure you're in the correct project directory\")\n            return 1\n        \n        # Start the realtime server\n        cmd = [sys.executable, str(server_file)]\n        \n        print(f\"Running: {' '.join(cmd)}\")\n        print(\"\\n📡 Server starting...\")\n        print(\"📞 Ready to handle calls on extension 1000\")\n        print(\"🎤 Enhanced OpenAI TTS enabled\")\n        print(\"🔊 Audio codec negotiation fixed\")\n        print(\"\\n⚠️  Press Ctrl+C to stop the server\")\n        print(\"=\" * 50)\n        \n        # Run the server\n        process = subprocess.run(cmd)\n        return process.returncode\n        \n    except KeyboardInterrupt:\n        print(\"\\n👋 Server stopped by user\")\n        return 0\n    except Exception as e:\n        print(f\"❌ Failed to start server: {e}\")\n        print(f\"💡 Current directory: {os.getcwd()}\")\n        print(f\"💡 Python executable: {sys.executable}\")\n        return 1\n\ndef test_call_flow():\n    \"\"\"Test the call flow\"\"\"\n    print(\"\\n📞 Call Flow Test Instructions:\")\n    print(\"=\" * 40)\n    print(\"1. Configure your SIP client (Zoiper, etc.):\")\n    print(\"   - Server: localhost:5060\")\n    print(\"   - Username: 1001\")\n    print(\"   - Password: 1234\")\n    print(\"\")\n    print(\"2. Make a call to extension 1000\")\n    print(\"\")\n    print(\"3. Expected behavior:\")\n    print(\"   ✅ Call connects immediately\")\n    print(\"   ✅ You hear the AI assistant greeting\")\n    print(\"   ✅ Both local AND remote codecs are negotiated\")\n    print(\"   ✅ Two-way audio works properly\")\n    print(\"\")\n    print(\"4. Check call quality in your SIP client:\")\n    print(\"   - Local codecs: G.711 mu-law\")\n    print(\"   - Remote codecs: G.711 mu-law (NOT 'None')\")\n    print(\"   - Call quality: Excellent\")\n    print(\"\")\n    print(\"5. Test conversation:\")\n    print(\"   - Say: 'Hello, I need help with my power connection'\")\n    print(\"   - AI should respond naturally in real-time\")\n    print(\"   - Voice interruption should work\")\n    print(\"\")\n    print(\"=\" * 40)\n\ndef main():\n    \"\"\"Main fix function\"\"\"\n    print_banner()\n    \n    # Check dependencies first\n    if not check_dependencies():\n        print(\"\\n❌ Dependency check failed!\")\n        print(\"💡 Please fix the missing dependencies and try again.\")\n        return 1\n    \n    # Check system status\n    print(\"\\n🔍 System Status Check:\")\n    asterisk_running = check_asterisk_status()\n    ari_connected = check_ari_connectivity()\n    \n    if not asterisk_running:\n        print(\"\\n❌ Asterisk is not running!\")\n        print(\"🔧 To start Asterisk:\")\n        print(\"   sudo systemctl start asterisk\")\n        print(\"   # OR\")\n        print(\"   sudo asterisk -f  # foreground mode\")\n        print(\"\\n💡 On macOS with Homebrew:\")\n        print(\"   brew services start asterisk\")\n        return 1\n    \n    if not ari_connected and REQUESTS_AVAILABLE:\n        print(\"\\n❌ ARI connection failed!\")\n        print(\"🔧 Check Asterisk ARI configuration:\")\n        print(\"   1. Verify asterisk-config/ari.conf\")\n        print(\"   2. Restart Asterisk\")\n        print(\"   3. Check firewall settings\")\n        return 1\n    elif not REQUESTS_AVAILABLE:\n        print(\"\\n⚠️  Skipping ARI connectivity check (requests module missing)\")\n        print(\"💡 Install requests: pip install requests\")\n    \n    print(\"\\n✅ System checks passed!\")\n    \n    # Show test instructions\n    test_call_flow()\n    \n    # Ask user if they want to start the server\n    try:\n        response = input(\"\\nStart the voice assistant server now? (y/n): \").strip().lower()\n        if response in ['y', 'yes']:\n            return start_voice_assistant()\n        else:\n            print(\"\\n💡 To start manually:\")\n            print(\"   python3 src/run_realtime_server.py\")\n            print(\"\\n💡 To test the fix:\")\n            print(\"   python3 test_codec_fix.py\")\n            return 0\n    except KeyboardInterrupt:\n        print(\"\\n👋 Goodbye!\")\n        return 0\n    except Exception as e:\n        print(f\"\\n❌ Error: {e}\")\n        return 1\n\nif __name__ == \"__main__\":\n    try:\n        sys.exit(main())\n    except Exception as e:\n        print(f\"\\n💥 Unexpected error: {e}\")\n        print(f\"💡 Python version: {sys.version}\")\n        print(f\"💡 Current directory: {os.getcwd()}\")\n        sys.exit(1)\n