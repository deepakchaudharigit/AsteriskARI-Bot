#!/usr/bin/env python3\n\"\"\"\nTest OpenAI Real-time API connection\n\"\"\"\n\nimport asyncio\nimport websockets\nimport json\nimport os\nfrom pathlib import Path\n\nasync def test_realtime_connection():\n    # Load API key from .env\n    env_file = Path('.env')\n    if env_file.exists():\n        with open(env_file, 'r') as f:\n            for line in f:\n                if line.strip() and not line.startswith('#') and '=' in line:\n                    key, value = line.strip().split('=', 1)\n                    os.environ[key] = value\n    \n    api_key = os.environ.get('OPENAI_API_KEY')\n    if not api_key:\n        print(\"❌ No API key found\")\n        return False\n    \n    print(f\"🔑 API Key: {api_key[:20]}...\")\n    \n    # Test WebSocket connection\n    url = \"wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01\"\n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"OpenAI-Beta\": \"realtime=v1\"\n    }\n    \n    try:\n        print(\"🔗 Attempting WebSocket connection...\")\n        async with websockets.connect(url, extra_headers=headers) as websocket:\n            print(\"✅ Connected to OpenAI Real-time API!\")\n            \n            # Send a simple session update\n            session_config = {\n                \"type\": \"session.update\",\n                \"session\": {\n                    \"modalities\": [\"text\", \"audio\"],\n                    \"instructions\": \"You are a helpful assistant.\",\n                    \"voice\": \"alloy\"\n                }\n            }\n            \n            await websocket.send(json.dumps(session_config))\n            print(\"📤 Sent session config\")\n            \n            # Wait for response\n            response = await asyncio.wait_for(websocket.recv(), timeout=10)\n            data = json.loads(response)\n            print(f\"📥 Received: {data.get('type', 'unknown')}\")\n            \n            if data.get('type') == 'session.updated':\n                print(\"✅ Real-time API is working!\")\n                return True\n            else:\n                print(f\"⚠️  Unexpected response: {data}\")\n                return False\n                \n    except websockets.exceptions.InvalidStatusCode as e:\n        print(f\"❌ WebSocket error: {e.status_code}\")\n        if e.status_code == 401:\n            print(\"🔑 API key might be invalid for Real-time API\")\n        elif e.status_code == 403:\n            print(\"🚫 Access denied - Real-time API might not be enabled for your account\")\n        return False\n    except asyncio.TimeoutError:\n        print(\"⏰ Connection timeout\")\n        return False\n    except Exception as e:\n        print(f\"❌ Connection failed: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    print(\"🧪 Testing OpenAI Real-time API Connection\")\n    print(\"=\" * 50)\n    \n    result = asyncio.run(test_realtime_connection())\n    \n    print(\"\\n\" + \"=\" * 50)\n    if result:\n        print(\"🎉 Real-time API connection successful!\")\n    else:\n        print(\"❌ Real-time API connection failed\")\n        print(\"\\n💡 Possible solutions:\")\n        print(\"1. Check if Real-time API is enabled for your OpenAI account\")\n        print(\"2. Verify API key has Real-time API permissions\")\n        print(\"3. Check network connectivity\")\n        print(\"4. Try regenerating the API key\")\n