NPCL Voice Assistant - Project Structure

Key Files Description:
=====================

MAIN APPLICATION FILES:
- npcl_voice_assistant.py      : Primary NPCL customer care assistant with natural conversation flow
- voice_chatbot.py             : General purpose voice chatbot with empathetic responses

CONFIGURATION:
- .env                         : Contains OpenAI API key and other environment variables
- requirements.txt             : Lists all Python dependencies (OpenAI, PyAudio, etc.)
- npcl_assistant/config.py     : Application configuration and NPCL-specific settings

DOCUMENTATION:
- README.md                    : Complete project setup and usage instructions
- QnA.md                       : Technical Q&A for presentations and interviews
- architecture.md              : Detailed system architecture and design patterns
- algo_steps.txt               : Implementation algorithm and development steps

SUPPORT MODULES:
- npcl_assistant/audio_processor.py  : Audio format conversion and processing utilities
- npcl_assistant/asterisk_ari.py     : Telephony system integration (future use)
- npcl_assistant/main.py             : Alternative application entry point

DEPLOYMENT:
- start_chatbot.sh             : Shell script for easy application startup
- venv/                        : Isolated Python environment with all dependencies

Technology Stack:
================
- Python 3.13.7               : Core runtime environment
- OpenAI Realtime API          : Voice-to-voice AI processing
- PyAudio                      : Real-time audio input/output
- WebSockets                   : Real-time communication protocol
- asyncio                      : Asynchronous programming framework
- Colorama                     : Terminal output formatting

Audio Processing:
================
- Format: PCM16 (16-bit PCM)
- Sample Rate: 24kHz
- Channels: Mono (1 channel)
- Chunk Size: 1024 bytes
- Encoding: Base64 for transmission

Key Features:
============
- Real-time voice-to-voice conversation
- Natural language processing with OpenAI
- NPCL-specific customer service flows
- Power outage and complaint handling
- Indian English speaking patterns
- Conversation state management
- Audio quality optimization
- Error handling and recovery

Usage:
======
1. Activate virtual environment: source venv/bin/activate
2. Run NPCL assistant: python npcl_voice_assistant.py
3. Run general chatbot: python voice_chatbot.py
4. Or use shell script: ./start_chatbot.sh

Dependencies:
============
- openai>=1.40.0              : OpenAI API client
- pyaudio>=0.2.11             : Audio I/O operations
- websockets>=12.0            : WebSocket communication
- colorama>=0.4.6             : Terminal colors
- python-dotenv>=1.0.0        : Environment variable management
- numpy>=1.24.0               : Numerical operations
- speech_recognition>=3.10.0  : Speech processing utilities
- pydub>=0.25.1               : Audio manipulation
- webrtcvad>=2.0.10           : Voice activity detection

Project Status: Production Ready
===============================
- Fully functional voice assistant
- Natural conversation capabilities
- NPCL customer service specialization
- Comprehensive documentation
- Ready for deployment and demonstration