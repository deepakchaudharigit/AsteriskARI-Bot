#!/usr/bin/env python3\n\"\"\"\nWorking codec fix test script\n\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\ndef main():\n    print(\"üîß NPCL Voice Assistant - Codec Fix Test\", flush=True)\n    print(\"=\" * 50, flush=True)\n    print(\"Testing codec issue fix...\", flush=True)\n    \n    # Check environment\n    print(f\"\\nüìÅ Directory: {os.getcwd()}\", flush=True)\n    print(f\"üêç Python: {sys.version.split()[0]}\", flush=True)\n    \n    # Check virtual environment\n    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):\n        print(\"‚úÖ Virtual environment: Active\", flush=True)\n    else:\n        print(\"‚ùå Virtual environment: Not active\", flush=True)\n    \n    # Check key files\n    print(\"\\nüîç Checking key files:\", flush=True)\n    files = [\n        \".env\",\n        \"src/run_realtime_server.py\",\n        \"src/voice_assistant/telephony/external_media_handler.py\",\n        \"src/voice_assistant/ai/openai_realtime_client_enhanced.py\"\n    ]\n    \n    all_files_exist = True\n    for f in files:\n        if Path(f).exists():\n            print(f\"‚úÖ {f}\", flush=True)\n        else:\n            print(f\"‚ùå {f}\", flush=True)\n            all_files_exist = False\n    \n    if not all_files_exist:\n        print(\"\\n‚ùå Some files are missing!\", flush=True)\n        return False\n    \n    # Check .env configuration\n    print(\"\\nüîç Checking .env configuration:\", flush=True)\n    try:\n        with open(\".env\", \"r\") as f:\n            content = f.read()\n        \n        config_checks = [\n            (\"AI_PROVIDER=openai\", \"AI Provider\"),\n            (\"ENABLE_VOICE_INTERRUPTION=true\", \"Voice Interruption\"),\n            (\"OPENAI_API_KEY=sk-\", \"OpenAI API Key\")\n        ]\n        \n        config_ok = True\n        for check, name in config_checks:\n            if check in content:\n                print(f\"‚úÖ {name}: Configured\", flush=True)\n            else:\n                print(f\"‚ùå {name}: Missing\", flush=True)\n                config_ok = False\n        \n        if not config_ok:\n            print(\"\\n‚ùå Configuration issues found!\", flush=True)\n            return False\n            \n    except Exception as e:\n        print(f\"‚ùå Error reading .env: {e}\", flush=True)\n        return False\n    \n    # Check external media handler\n    print(\"\\nüîç Checking external media handler fixes:\", flush=True)\n    try:\n        with open(\"src/voice_assistant/telephony/external_media_handler.py\", \"r\") as f:\n            handler_content = f.read()\n        \n        handler_checks = [\n            (\"_handle_ai_audio_response\", \"AI Audio Response Handler\"),\n            (\"register_event_handler('audio_response'\", \"Event Handler Registration\"),\n            (\"send_audio(audio_data)\", \"Audio Sending Function\")\n        ]\n        \n        handler_ok = True\n        for check, name in handler_checks:\n            if check in handler_content:\n                print(f\"‚úÖ {name}: Implemented\", flush=True)\n            else:\n                print(f\"‚ùå {name}: Missing\", flush=True)\n                handler_ok = False\n        \n        if not handler_ok:\n            print(\"\\n‚ùå External media handler issues found!\", flush=True)\n            return False\n            \n    except Exception as e:\n        print(f\"‚ùå Error checking handler: {e}\", flush=True)\n        return False\n    \n    # Check if we can import key modules\n    print(\"\\nüîç Testing module imports:\", flush=True)\n    try:\n        sys.path.insert(0, 'src')\n        \n        # Test config import\n        try:\n            from config.settings import get_settings\n            settings = get_settings()\n            print(\"‚úÖ Config module: Working\", flush=True)\n            \n            if hasattr(settings, 'ai_provider'):\n                print(f\"‚úÖ AI Provider: {settings.ai_provider}\", flush=True)\n            else:\n                print(\"‚ùå AI Provider: Not configured\", flush=True)\n                \n        except Exception as e:\n            print(f\"‚ùå Config import failed: {e}\", flush=True)\n            return False\n        \n        # Test AI client import\n        try:\n            from voice_assistant.ai.ai_client_factory import create_ai_client\n            print(\"‚úÖ AI Client Factory: Working\", flush=True)\n        except Exception as e:\n            print(f\"‚ùå AI Client import failed: {e}\", flush=True)\n            return False\n            \n    except Exception as e:\n        print(f\"‚ùå Module import test failed: {e}\", flush=True)\n        return False\n    \n    # Success!\n    print(\"\\nüéâ All tests passed!\", flush=True)\n    print(\"\\nüìã Codec Fix Summary:\", flush=True)\n    print(\"1. ‚úÖ AI_PROVIDER=openai configured\", flush=True)\n    print(\"2. ‚úÖ Voice interruption enabled\", flush=True)\n    print(\"3. ‚úÖ External media handler enhanced\", flush=True)\n    print(\"4. ‚úÖ Audio response chain implemented\", flush=True)\n    print(\"5. ‚úÖ All modules importing correctly\", flush=True)\n    \n    print(\"\\nüöÄ Ready to test the fix:\", flush=True)\n    print(\"1. Start Asterisk: sudo systemctl start asterisk\", flush=True)\n    print(\"2. Start voice assistant: python3 src/run_realtime_server.py\", flush=True)\n    print(\"3. Configure SIP client:\", flush=True)\n    print(\"   - Server: localhost:5060\", flush=True)\n    print(\"   - Username: 1001\", flush=True)\n    print(\"   - Password: 1234\", flush=True)\n    print(\"4. Call extension 1000\", flush=True)\n    print(\"5. Expected result:\", flush=True)\n    print(\"   ‚úÖ Local codecs: G.711 mu-law\", flush=True)\n    print(\"   ‚úÖ Remote codecs: G.711 mu-law (NOT 'None')\", flush=True)\n    print(\"   ‚úÖ Two-way audio working\", flush=True)\n    print(\"   ‚úÖ AI responds in real-time\", flush=True)\n    \n    return True\n\nif __name__ == \"__main__\":\n    try:\n        success = main()\n        if success:\n            print(\"\\n‚úÖ Codec fix verification: PASSED\", flush=True)\n            sys.exit(0)\n        else:\n            print(\"\\n‚ùå Codec fix verification: FAILED\", flush=True)\n            sys.exit(1)\n    except Exception as e:\n        print(f\"\\nüí• Test error: {e}\", flush=True)\n        sys.exit(1)\n