#!/usr/bin/env python3\n\"\"\"\nTest script to verify codec fix and audio response functionality\n\"\"\"\n\nimport asyncio\nimport logging\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add src to Python path\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\nasync def test_openai_realtime_client():\n    \"\"\"Test OpenAI Realtime Client\"\"\"\n    print(\"\\nüß™ Testing OpenAI Realtime Client...\")\n    \n    try:\n        from voice_assistant.ai.openai_realtime_client_enhanced import OpenAIRealtimeClientEnhanced\n        from config.settings import get_settings\n        \n        settings = get_settings()\n        client = OpenAIRealtimeClientEnhanced(api_key=settings.openai_api_key)\n        \n        # Test connection\n        connected = await client.connect()\n        if connected:\n            print(\"‚úÖ OpenAI Realtime Client: Connected successfully\")\n            \n            # Start conversation\n            session_id = await client.start_conversation()\n            print(f\"‚úÖ Conversation started: {session_id}\")\n            \n            # Test audio chunk sending\n            test_audio = b'\\x00' * 1024  # Dummy audio data\n            success = await client.send_audio_chunk(test_audio)\n            if success:\n                print(\"‚úÖ Audio chunk sent successfully\")\n            else:\n                print(\"‚ùå Failed to send audio chunk\")\n            \n            # Test response creation\n            response_created = await client.create_response()\n            if response_created:\n                print(\"‚úÖ Response creation successful\")\n            else:\n                print(\"‚ùå Failed to create response\")\n            \n            # Wait a bit for any responses\n            await asyncio.sleep(2)\n            \n            # Check for audio output\n            audio_output = client.get_audio_output()\n            if audio_output:\n                print(f\"‚úÖ Audio output received: {len(audio_output)} bytes\")\n            else:\n                print(\"‚ÑπÔ∏è  No audio output (expected for dummy data)\")\n            \n            # End conversation\n            await client.end_conversation()\n            await client.disconnect()\n            print(\"‚úÖ OpenAI Realtime Client test completed\")\n            return True\n        else:\n            print(\"‚ùå Failed to connect to OpenAI Realtime API\")\n            return False\n            \n    except Exception as e:\n        print(f\"‚ùå OpenAI Realtime Client test failed: {e}\")\n        return False\n\nasync def test_external_media_handler():\n    \"\"\"Test External Media Handler\"\"\"\n    print(\"\\nüß™ Testing External Media Handler...\")\n    \n    try:\n        from voice_assistant.telephony.external_media_handler import ExternalMediaHandler\n        from voice_assistant.core.session_manager import SessionManager\n        from voice_assistant.ai.openai_realtime_client_enhanced import OpenAIRealtimeClientEnhanced\n        from config.settings import get_settings\n        \n        settings = get_settings()\n        \n        # Create components\n        session_manager = SessionManager()\n        ai_client = OpenAIRealtimeClientEnhanced(api_key=settings.openai_api_key)\n        \n        # Connect AI client\n        connected = await ai_client.connect()\n        if not connected:\n            print(\"‚ùå Failed to connect AI client for external media test\")\n            return False\n        \n        # Create external media handler\n        media_handler = ExternalMediaHandler(session_manager, ai_client)\n        \n        # Test server start\n        server_started = await media_handler.start_server(host=\"localhost\", port=8091)\n        if server_started:\n            print(\"‚úÖ External Media Server: Started successfully on localhost:8091\")\n            \n            # Test server stats\n            stats = media_handler.get_server_stats()\n            print(f\"‚úÖ Server stats: {stats['active_connections']} connections\")\n            \n            # Wait a bit\n            await asyncio.sleep(1)\n            \n            # Stop server\n            await media_handler.stop_server()\n            print(\"‚úÖ External Media Server: Stopped successfully\")\n            \n            await ai_client.disconnect()\n            return True\n        else:\n            print(\"‚ùå Failed to start external media server\")\n            await ai_client.disconnect()\n            return False\n            \n    except Exception as e:\n        print(f\"‚ùå External Media Handler test failed: {e}\")\n        return False\n\nasync def test_audio_processing():\n    \"\"\"Test Audio Processing\"\"\"\n    print(\"\\nüß™ Testing Audio Processing...\")\n    \n    try:\n        from voice_assistant.audio.realtime_audio_processor import RealTimeAudioProcessor, AudioConfig, AudioFormat\n        \n        # Create audio processor\n        config = AudioConfig(\n            sample_rate=16000,\n            format=AudioFormat.SLIN16,\n            chunk_size=320\n        )\n        \n        processor = RealTimeAudioProcessor(config)\n        \n        # Start processing\n        await processor.start_processing()\n        print(\"‚úÖ Audio Processor: Started successfully\")\n        \n        # Test audio processing\n        test_audio = b'\\x00' * 640  # 320 samples * 2 bytes = 640 bytes\n        result = await processor.process_input_audio(test_audio)\n        print(f\"‚úÖ Audio processing result: {result}\")\n        \n        # Test output audio preparation\n        output_audio = await processor.prepare_output_audio(test_audio)\n        print(f\"‚úÖ Output audio prepared: {len(output_audio)} bytes\")\n        \n        # Get stats\n        stats = processor.get_audio_stats()\n        print(f\"‚úÖ Audio stats: {stats}\")\n        \n        # Stop processing\n        await processor.stop_processing()\n        print(\"‚úÖ Audio Processor: Stopped successfully\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Audio Processing test failed: {e}\")\n        return False\n\nasync def test_ai_client_factory():\n    \"\"\"Test AI Client Factory\"\"\"\n    print(\"\\nüß™ Testing AI Client Factory...\")\n    \n    try:\n        from voice_assistant.ai.ai_client_factory import create_ai_client, get_current_provider\n        \n        # Get current provider\n        provider = get_current_provider()\n        print(f\"‚úÖ Current AI provider: {provider}\")\n        \n        # Create AI client\n        client = create_ai_client()\n        print(f\"‚úÖ AI client created: {type(client).__name__}\")\n        \n        # Test connection if it's the enhanced client\n        if hasattr(client, 'connect'):\n            connected = await client.connect()\n            if connected:\n                print(\"‚úÖ AI client connected successfully\")\n                await client.disconnect()\n            else:\n                print(\"‚ùå AI client connection failed\")\n                return False\n        \n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå AI Client Factory test failed: {e}\")\n        return False\n\ndef test_configuration():\n    \"\"\"Test Configuration\"\"\"\n    print(\"\\nüß™ Testing Configuration...\")\n    \n    try:\n        from config.settings import get_settings\n        \n        settings = get_settings()\n        \n        # Check key settings\n        if hasattr(settings, 'ai_provider'):\n            print(f\"‚úÖ AI Provider: {settings.ai_provider}\")\n        else:\n            print(\"‚ùå AI Provider not configured\")\n            return False\n        \n        if hasattr(settings, 'openai_api_key') and settings.openai_api_key:\n            print(\"‚úÖ OpenAI API Key: Configured\")\n        else:\n            print(\"‚ùå OpenAI API Key: Not configured\")\n            return False\n        \n        if hasattr(settings, 'enable_voice_interruption'):\n            print(f\"‚úÖ Voice Interruption: {settings.enable_voice_interruption}\")\n        else:\n            print(\"‚ùå Voice Interruption: Not configured\")\n            return False\n        \n        print(f\"‚úÖ Audio format: {getattr(settings, 'audio_format', 'slin16')}\")\n        print(f\"‚úÖ Sample rate: {getattr(settings, 'audio_sample_rate', 16000)}\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Configuration test failed: {e}\")\n        return False\n\nasync def main():\n    \"\"\"Main test function\"\"\"\n    print(\"üîß NPCL Voice Assistant - Codec Fix Test\")\n    print(\"=\" * 50)\n    \n    # Test results\n    results = []\n    \n    # Test configuration\n    config_ok = test_configuration()\n    results.append((\"Configuration\", config_ok))\n    \n    if not config_ok:\n        print(\"\\n‚ùå Configuration test failed. Please fix configuration issues first.\")\n        return 1\n    \n    # Test AI client factory\n    ai_factory_ok = await test_ai_client_factory()\n    results.append((\"AI Client Factory\", ai_factory_ok))\n    \n    # Test OpenAI realtime client\n    openai_ok = await test_openai_realtime_client()\n    results.append((\"OpenAI Realtime Client\", openai_ok))\n    \n    # Test audio processing\n    audio_ok = await test_audio_processing()\n    results.append((\"Audio Processing\", audio_ok))\n    \n    # Test external media handler (only if OpenAI client works)\n    if openai_ok:\n        media_ok = await test_external_media_handler()\n        results.append((\"External Media Handler\", media_ok))\n    else:\n        print(\"\\n‚ö†Ô∏è  Skipping External Media Handler test due to OpenAI client failure\")\n        results.append((\"External Media Handler\", False))\n    \n    # Print results\n    print(\"\\n\" + \"=\" * 50)\n    print(\"üìä Test Results:\")\n    print(\"=\" * 50)\n    \n    all_passed = True\n    for test_name, passed in results:\n        status = \"‚úÖ PASS\" if passed else \"‚ùå FAIL\"\n        print(f\"{test_name:25} {status}\")\n        if not passed:\n            all_passed = False\n    \n    print(\"\\n\" + \"=\" * 50)\n    if all_passed:\n        print(\"üéâ All tests passed! The codec fix should work properly.\")\n        print(\"\\nüöÄ Next steps:\")\n        print(\"1. Start Asterisk: sudo systemctl start asterisk\")\n        print(\"2. Start the voice assistant: python3 src/run_realtime_server.py\")\n        print(\"3. Make a test call to extension 1000\")\n        print(\"4. Check that both local and remote codecs are negotiated\")\n        return 0\n    else:\n        print(\"‚ùå Some tests failed. Please fix the issues before proceeding.\")\n        print(\"\\nüîß Common fixes:\")\n        print(\"1. Check .env configuration\")\n        print(\"2. Verify OpenAI API key\")\n        print(\"3. Install missing dependencies\")\n        print(\"4. Check network connectivity\")\n        return 1\n\nif __name__ == \"__main__\":\n    sys.exit(asyncio.run(main()))\n